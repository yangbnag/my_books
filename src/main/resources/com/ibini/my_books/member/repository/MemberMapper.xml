<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace 속성에는 사용할 인터페이스의 풀 패키지 경로 + 인터페이스 이름 -->
<mapper namespace="com.ibini.my_books.member.repository.MemberMapper">

    <resultMap id="MemberMap" type="com.ibini.my_books.member.domain.Member">
        <result column="user_id" property="userId"/>
        <result column="user_name" property="userName"/>
        <result column="post_amount" property="postAmount"/>
        <result column="join_date" property="joinDate"/>
        <result column="last_login" property="lastLogin"/>
        <result column="email_verification" property="emailVerification"/>
        <result column="session_id" property="sessionId"/>
        <result column="limit_time" property="limitTime"/>
    </resultMap>

<!-- 마리아   -->
    <!--   일반 회원 가입 기능 00  -->
    <insert id="register">

        INSERT INTO tbl_member
        (
            account, user_id,
            password, user_name, email
        )
             VALUES
              (
                    CONCAT( DATE_FORMAT(SYSDATE(), '%y%m%d'),LPAD(NEXTVAL(seq_tbl_member),4,'0')),
                   #{userId}, #{password}, #{userName}, #{email}
        )
    </insert>

<!--    ========== 시퀀스 ==========-->
<!--     데이터 추출-->
<!--    SELECT DATE_FORMAT(SYSDATE(), '%y%m%d');-->
<!--      일련번호 추출-->
<!--    SELECT LPAD(NEXTVAL(seq_tbl_member),4,'0');-->
<!--     합체-->
<!--    SELECT CONCAT( DATE_FORMAT(SYSDATE(), '%y%m%d'),LPAD(NEXTVAL(seq_tbl_member),4,'0'));-->


<!--    마리아 디비  -->
<!--        중복 체크 기능(아이디와 이메일을 동시에 처리 = 동적 sql)  00 -->
    <select id="isDuplicate" resultType="int">

        SELECT COUNT(*)
        FROM tbl_manage_member

        <if test="type=='userId'" >
            WHERE user_id = #{value}
        </if>
        <if test="type=='email'">
            WHERE email = #{value}
        </if>
        <!--        결과가 1이면 중복, 0이면 회원가입 가능 -->
    </select>


<!--        회원조회 기능   00 -->
    <select id="findUser" resultMap="MemberMap">

        SELECT *
        FROM tbl_member
        WHERE user_id = #{userId}

    </select>

    <!--  패스워드 일치 확인   -->
    <select id="pwCheck" resultType="String">
        SELECT password FROM tbl_member WHERE account = #{account}
    </select>

<!--      회원 이메일 수정 기능   00 -->
    <update id="updateEmail">
        UPDATE tbl_member
        SET email = #{email}
        WHERE user_id = #{userId}

    </update>

<!--      회원 닉네임 수정 기능   00  -->
    <update id="updateName">
        UPDATE tbl_member
        SET user_name = #{userName}
        WHERE user_id = #{userId}

    </update>

<!--  회원 비밀번호 수정 기능   00  -->
    <update id="updatePw">
        UPDATE tbl_member
        SET password = #{password}
        WHERE user_id = #{userId}

    </update>

<!--    email로 회원 아이디 찾기 -->

    <select id="findUserId" resultMap="MemberMap">

        SELECT *
        FROM tbl_member
        WHERE email = #{email}

    </select>

<!--   email_verification kakao 변경 -->
<update id="verificationKakaoChange">
    UPDATE tbl_member
    SET email_verification = 'kakao'
    WHERE email = #{email}
</update>

<!-- kakao 로그인 유저인지 확인 -->
<select id="findVerificationKakao" resultType="int">

        SELECT COUNT(*)
        FROM tbl_member
        WHERE email_verification = 'kakao' AND email = #{email}

</select>


<!--  회원 탈퇴  -->
    <delete id="memberDelete">
        DELETE FROM tbl_member
        WHERE user_id = #{userId}
    </delete>

    <!--  회원관리테이블의 상태 변경 true -> false  -->
    <update id="changeCondition">

        UPDATE tbl_manage_member
        SET user_condition = 'false'
        WHERE user_id = #{userId}

    </update>

    <!--  탈퇴 회원 관리 테이블 userId = reasonNum  -->

    <insert id="insertReasonNum">

        INSERT INTO tbl_manage_break_away
        (
           user_id,reason_num
        )
            VALUES
               (
                  #{userId}, #{reasonNum}
                )

    </insert>

<!--    insertReason -->

    <insert id="insertReason">

        INSERT INTO tbl_reason_break_away
            (
        reason_num, out_reason
             )
        VALUES
             (
        NEXTVAL(seq_tbl_reason_break_away), #{outReason}
             )

    </insert>

    <!--  자동 로그인 정보 추가  -->
    <update id="saveAutoLoginValue">

        UPDATE tbl_member
        SET session_id = #{sessionId}, limit_time = #{limitTime}
        WHERE user_id = #{userId}

    </update>

    <!--  세션 아이디로 회원정보조회  -->
    <select id="findMemberBysessionId" resultMap="MemberMap">

        SELECT * FROM tbl_member
        WHERE session_id = #{sessionId}

    </select>

    <!--  userId로 account 가져오기  -->
    <select id="changeIdToAccount" resultType="String">
        select account
        from tbl_member
        where user_id = #{userId}
    </select>

    <resultMap id="manageInquiry" type="com.ibini.my_books.member.domain.InquiryTable">
        <result column="serial_number" property="serialNumber"/>
        <result column="user_id" property="userId"/>
        <result column="inquiry_title" property="inquiryTitle"/>
        <result column="inquiry_date" property="inquiryDate"/>
        <result column="answer_date" property="answerDate"/>
    </resultMap>

<!--    회원관리       -->
    <!--  신규회원 회원 관리 테이블에 등록하기 00 -->

    <insert id="registerManageMember">

        INSERT INTO tbl_manage_member
        (user_id, email)
        VALUES
        ( #{userId}, #{email} )

    </insert>

      <!-- 문의사항 등록하기  -->
    <insert id="inquiryRegister">
        INSERT INTO tbl_manage_inquiry
            (
                serial_number,
                user_id, inquiry_title, inquiry
            )
        VALUES
            (
                 CONCAT( DATE_FORMAT(SYSDATE(), '%y%m%d'),LPAD(NEXTVAL(seq_tbl_member),4,'0')),
                #{userId}, #{inquiryTitle}, #{inquiry}
            )
    </insert>

        <!--    답변 등록하기 -->
    <update id="answerRegister">
        UPDATE tbl_manage_inquiry
        SET answer = #{answer}, answer_date = now()
        WHERE serial_number = #{serialNumber}
    </update>

        <!-- 문의내역 상세 조회  -->
    <select id="findOneInquiry" resultMap="manageInquiry">

        SELECT *
        FROM tbl_manage_inquiry
        WHERE serial_number = #{serialNumber}

    </select>


<!--    mariaDB  -->
    <!-- 회원 마이페이지에서 회원 문의내역 조회하기  -->
    <select id="findMemberInquiry" resultMap="manageInquiry">

        SELECT *
        FROM tbl_manage_inquiry
        WHERE user_id = #{userId}
        ORDER BY inquiry_date DESC
        LIMIT #{page.start}, #{page.amount}

    </select>


<!--     관리자 페이지에서 문의내역 전체 조회하기    -->
<!--  mariaDB   -->
    <select id="findAllInquiry" resultMap="manageInquiry">

        SELECT *
          FROM tbl_manage_inquiry
          ORDER BY inquiry_date DESC
          LIMIT #{start}, #{amount}

    </select>

    <!-- 문의글 수정 -->
    <update id="inquiryModify">
        UPDATE tbl_manage_inquiry
        SET inquiry_title = #{inquiryTitle}, inquiry = #{inquiry}
        WHERE serial_number = #{serialNumber}
    </update>

    <!-- 문의글 삭제 -->
    <delete id="inquiryDelete">
        DELETE FROM tbl_manage_inquiry
        WHERE serial_number = #{serialNumber}
    </delete>

<!--    // 회원 로그인 상태 - 총 문의글 수 구하기 (페이지 처리)-->
    <select id="getTotalMemberInquiry" resultType="int">

        SELECT COUNT(*) FROM tbl_manage_inquiry WHERE user_id = #{userId}

    </select>

<!--    // 관리자 로그인 상태 - 총 문의글 수 구하기 (페이지 처리)-->
    <select id="getTotalInquiry" resultType="int">

        SELECT COUNT(*) FROM tbl_manage_inquiry

    </select>

<!--  탈퇴사유 관리 테이블의 마지막 reasonNum 구하기  -->
    <select id="getCurrentReasonNum" resultType="int">
        SELECT COUNT(*) FROM tbl_reason_break_away
    </select>

<!--  관리자의 회원관리 탈퇴/가입 전체 회원 조회 findAllManageMember  -->
    <resultMap id="manageMemberMap" type="com.ibini.my_books.member.domain.ManageMember">

        <result column="user_id" property="userId"/>
        <result column="user_condition" property="userCondition"/>

    </resultMap>
    <select id="findAllManageMember" resultMap="manageMemberMap">
        SELECT * FROM tbl_manage_member WHERE user_id != 'admin';
    </select>

<!--  가입한 회원수 구하기  -->
    <select id="getTotalCurrentMemberCount" resultType="int">
        SELECT COUNT(*) FROM tbl_manage_member WHERE user_id != 'admin' AND user_condition = 'true';
    </select>

<!--   탈퇴한 회원수 구하기 -->
    <select id="getTotalOutMemberCount" resultType="int">
        SELECT COUNT(*) FROM tbl_manage_member WHERE user_id != 'admin' AND user_condition = 'false'
    </select>

    <resultMap id="outReasonMap" type="com.ibini.my_books.member.dto.OutReasonManageDTO">

        <result column="user_id" property="userId"/>
        <result column="out_reason" property="outReason"/>

    </resultMap>
<!--        //회원의 탈퇴내용 조회    -->
    <select id="findAllOutReason" resultMap="outReasonMap">
        SELECT
             A.user_id,
             B.out_reason AS out_reason
        FROM
             tbl_manage_break_away A
            ,tbl_reason_break_away B
        WHERE A.reason_num = B.reason_num;

    </select>

<!--  로그인 기록 남기기   -->
    <insert id="loginLogInsert">
        INSERT INTO login_list
        (login_num, account)
        VALUES
        ( NEXTVAL(seq_login_list), #{account} )

    </insert>


</mapper>